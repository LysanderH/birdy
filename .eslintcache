[{"E:\\Projekte\\2020\\birdy\\src\\pages\\Register.jsx":"1","E:\\Projekte\\2020\\birdy\\src\\utils\\firebase-config.jsx":"2","E:\\Projekte\\2020\\birdy\\src\\pages\\Users.jsx":"3","E:\\Projekte\\2020\\birdy\\src\\PrivateRoute.jsx":"4","E:\\Projekte\\2020\\birdy\\src\\pages\\Home.jsx":"5","E:\\Projekte\\2020\\birdy\\src\\App.js":"6","E:\\Projekte\\2020\\birdy\\src\\pages\\Login.jsx":"7","E:\\Projekte\\2020\\birdy\\src\\pages\\Captures.jsx":"8","E:\\Projekte\\2020\\birdy\\src\\contexts\\Auth.jsx":"9","E:\\Projekte\\2020\\birdy\\src\\pages\\Reprises.jsx":"10","E:\\Projekte\\2020\\birdy\\src\\index.js":"11","E:\\Projekte\\2020\\birdy\\src\\pages\\Encyclopedy.jsx":"12","E:\\Projekte\\2020\\birdy\\src\\pages\\EncyBird.jsx":"13","E:\\Projekte\\2020\\birdy\\src\\components\\Image.jsx":"14","E:\\Projekte\\2020\\birdy\\src\\components\\Audio.jsx":"15","E:\\Projekte\\2020\\birdy\\src\\components\\GMap.jsx":"16","E:\\Projekte\\2020\\birdy\\src\\pages\\NewCapture.jsx":"17","E:\\Projekte\\2020\\birdy\\src\\utils\\LatinNameList.jsx":"18","E:\\Projekte\\2020\\birdy\\src\\pages\\SetPlace.jsx":"19","E:\\Projekte\\2020\\birdy\\src\\utils\\City-list.jsx":"20","E:\\Projekte\\2020\\birdy\\src\\pages\\NewCatchingPlace.jsx":"21","E:\\Projekte\\2020\\birdy\\src\\pages\\Capture.jsx":"22","E:\\Projekte\\2020\\birdy\\src\\pages\\NewReprise.jsx":"23","E:\\Projekte\\2020\\birdy\\src\\pages\\Reprise.jsx":"24","E:\\Projekte\\2020\\birdy\\src\\pages\\Places.jsx":"25","E:\\Projekte\\2020\\birdy\\src\\pages\\User.jsx":"26"},{"size":4008,"mtime":1611144719313,"results":"27","hashOfConfig":"28"},{"size":528,"mtime":1608386550000,"results":"29","hashOfConfig":"28"},{"size":1262,"mtime":1611263213664,"results":"30","hashOfConfig":"28"},{"size":568,"mtime":1611070326304,"results":"31","hashOfConfig":"28"},{"size":2981,"mtime":1611249200411,"results":"32","hashOfConfig":"28"},{"size":4216,"mtime":1611268611981,"results":"33","hashOfConfig":"28"},{"size":2069,"mtime":1611266149303,"results":"34","hashOfConfig":"28"},{"size":2370,"mtime":1611241932330,"results":"35","hashOfConfig":"28"},{"size":698,"mtime":1611145777745,"results":"36","hashOfConfig":"28"},{"size":2367,"mtime":1611252571523,"results":"37","hashOfConfig":"28"},{"size":197,"mtime":1608388076000,"results":"38","hashOfConfig":"28"},{"size":3137,"mtime":1611163496905,"results":"39","hashOfConfig":"28"},{"size":3525,"mtime":1611257814313,"results":"40","hashOfConfig":"28"},{"size":488,"mtime":1611170867512,"results":"41","hashOfConfig":"28"},{"size":630,"mtime":1611171456119,"results":"42","hashOfConfig":"28"},{"size":1648,"mtime":1611268269772,"results":"43","hashOfConfig":"28"},{"size":4189,"mtime":1611239568931,"results":"44","hashOfConfig":"28"},{"size":8730,"mtime":1611178439756,"results":"45","hashOfConfig":"28"},{"size":2191,"mtime":1611255788753,"results":"46","hashOfConfig":"28"},{"size":40086,"mtime":1611233902134,"results":"47","hashOfConfig":"28"},{"size":2005,"mtime":1611267688365,"results":"48","hashOfConfig":"28"},{"size":6236,"mtime":1611246953875,"results":"49","hashOfConfig":"28"},{"size":7041,"mtime":1611251825414,"results":"50","hashOfConfig":"28"},{"size":7032,"mtime":1611254873641,"results":"51","hashOfConfig":"28"},{"size":698,"mtime":1611266551642,"results":"52","hashOfConfig":"28"},{"size":2501,"mtime":1611265980251,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1ee2wox",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"56"},"E:\\Projekte\\2020\\birdy\\src\\pages\\Register.jsx",[],["114","115"],"E:\\Projekte\\2020\\birdy\\src\\utils\\firebase-config.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\pages\\Users.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\PrivateRoute.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\pages\\Home.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\App.js",[],"E:\\Projekte\\2020\\birdy\\src\\pages\\Login.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\pages\\Captures.jsx",["116"],"import React, {Fragment, useState, useEffect, useContext} from 'react'\r\nimport firebase from '../utils/firebase-config'\r\nimport { AuthContext } from '../contexts/Auth'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Captures() {\r\n    const [captures, setCaptures] = useState()\r\n\r\nconst { currentUser } = useContext(AuthContext);\r\n\r\n    useEffect(() => {\r\n        firebase.firestore().collection('captures').where('user', '==', currentUser.email).get()\r\n            .then(querySnapshot => {\r\n                const data = querySnapshot.docs.map(doc => doc.data());\r\n                data.sort((a, b) => {\r\n                    if (a.capturedAt.seconds > b.capturedAt.seconds) {\r\n                        return -1;\r\n                    } else if(a.capturedAt.seconds < b.capturedAt.seconds) {\r\n                        return 1;\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                })\r\n                setCaptures(data);\r\n            }).catch(error => console.error(error));\r\n    }, [])\r\n\r\n    console.log(captures)\r\n\r\n    const getDate= (sec) => {\r\n        const date = new Date(1970, 0, 1)\r\n        date.setSeconds(sec)\r\n        return date.toLocaleDateString(\"fr-BE\")\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Captures</h2>\r\n            {captures ?\r\n                <ul className=\"captures__list\">\r\n                    {\r\n                        captures.map((capture, id) =>\r\n                            <li className=\"captures__item item\" key={id}>\r\n                                <Link to={'/captures/' + capture.ring}>\r\n                                    <dl className=\"captures__data-list\">\r\n                                        <dt className=\"captures__ring\">{capture.ring}</dt>\r\n                                        <dd className=\"captures__date\">{ getDate(capture.capturedAt.seconds) }</dd>\r\n                                        <dd className=\"captures__place\">{capture.place}</dd>\r\n                                        <dd className=\"captures__latin\">{capture.latin}</dd>\r\n                                    </dl>\r\n                                </Link>\r\n                            </li>\r\n                        )\r\n                    }\r\n                </ul> : 'Vous n’avez pas encore capturer d’oiseaux'\r\n            }\r\n        </Fragment>\r\n    )\r\n}","E:\\Projekte\\2020\\birdy\\src\\contexts\\Auth.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\pages\\Reprises.jsx",["117"],"import React, {Fragment, useState, useEffect, useContext} from 'react'\r\nimport firebase from '../utils/firebase-config'\r\nimport { AuthContext } from '../contexts/Auth'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Reprises() {\r\n    const [captures, setCaptures] = useState()\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    useEffect(() => {\r\n        firebase.firestore().collection('reprises').where('user', '==', currentUser.email).get()\r\n            .then(querySnapshot => {\r\n                const data = querySnapshot.docs.map(doc => doc.data());\r\n                data.sort((a, b) => {\r\n                    if (a.createdAt.seconds > b.createdAt.seconds) {\r\n                        return -1;\r\n                    } else if(a.createdAt.seconds < b.createdAt.seconds) {\r\n                        return 1;\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                })\r\n                setCaptures(data);\r\n            }).catch(error => console.error(error));\r\n    }, [])\r\n\r\n    console.log(captures)\r\n\r\n    const getDate= (sec) => {\r\n        const date = new Date(1970, 0, 1)\r\n        date.setSeconds(sec)\r\n        return date.toLocaleDateString(\"fr-BE\")\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Captures</h2>\r\n            {captures ?\r\n                <ul className=\"captures__list\">\r\n                    {\r\n                        captures.map((capture, id) =>\r\n                            <li className=\"captures__item item\" key={id}>\r\n                                <Link to={'/reprises/' + capture.id}>\r\n                                    <dl className=\"captures__data-list\">\r\n                                        <dt className=\"captures__ring\">{capture.ring}</dt>\r\n                                        <dd className=\"captures__date\">{ getDate(capture.createdAt.seconds) }</dd>\r\n                                        <dd className=\"captures__place\">{capture.place}</dd>\r\n                                        <dd className=\"captures__latin\">{capture.latin}</dd>\r\n                                    </dl>\r\n                                </Link>\r\n                            </li>\r\n                        )\r\n                    }\r\n                </ul> : 'Vous n’avez pas encore capturer d’oiseaux'\r\n            }\r\n        </Fragment>\r\n    )\r\n}","E:\\Projekte\\2020\\birdy\\src\\index.js",[],"E:\\Projekte\\2020\\birdy\\src\\pages\\Encyclopedy.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\pages\\EncyBird.jsx",["118"],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport Image from '../components/Image';\r\nimport Audio from '../components/Audio';\r\nimport firebase from '../utils/firebase-config'\r\nimport GMap from '../components/GMap';\r\n\r\nexport default function EncyBird(props) {\r\n    const [bird, setBird] = useState([]);\r\n    const position = {\r\n        lat: 51.260197,\r\n        lng: 4.402771\r\n    }\r\n\r\n    useEffect(() => {\r\n        firebase.firestore().collection(\"encyclopedy\").where('id', \"==\", props.match.params.bird)\r\n            .get()\r\n            .then(querySnapshot => {\r\n                const data = querySnapshot.docs.map(doc => doc.data());\r\n                setBird(data[0]);\r\n            });\r\n    }, [])\r\n    // console.log(bird.distribution);\r\n    const getCoordinates = () => {\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <button className=\"back\" onClick={props.history.goBack}>Retour</button>\r\n            {bird ? \r\n            <dl className=\"ency__list\">\r\n                <dt className=\"ency__therm\">Nom</dt>\r\n                <dd className=\"ency__definition\">{ bird.name ?? '/' }</dd>\r\n                <dt className=\"ency__therm\">Nom latin</dt>\r\n                <dd className=\"ency__definition\">{ bird.latin ?? '/' }</dd>\r\n                <dt className=\"ency__therm\">Famille</dt>\r\n                <dd className=\"ency__definition\">{ bird.famely ?? '/' }</dd>\r\n                <dt className=\"ency__therm\">Foto</dt>\r\n                    <dd className=\"ency__definition\">{bird.foto ? <Image foto={bird.foto} width={300} height={225} /> : 'Pas de photos'}</dd>\r\n                <dt className=\"ency__therm\">Description</dt>\r\n                <dd className=\"ency__definition\">{ bird.description ?? '/' }</dd>\r\n                <dt className=\"ency__therm\">Taille</dt>\r\n                <dd className=\"ency__definition\">{ bird.height ?? '/' } cm</dd>\r\n                <dt className=\"ency__therm\">Envergure</dt>\r\n                <dd className=\"ency__definition\">{ bird.envergure ?? '/' } cm</dd>\r\n                <dt className=\"ency__therm\">Temps de vie</dt>\r\n                <dd className=\"ency__definition\">{ Math.round(bird.lifespan/3600/24/365) ?? '/' } ans</dd>\r\n                <dt className=\"ency__therm\">Alimentation</dt>\r\n                {bird.alimentation ? bird.alimentation.map((item, id) => \r\n                    <dd className=\"ency__definition\" key={id}>{item}</dd>\r\n                    ) : '/'}\r\n                <dt className=\"ency__therm\">Nidification</dt>\r\n                <dd className=\"ency__definition\">{ bird.nesting ?? '/' }</dd>\r\n                <dt className=\"ency__therm\">Habitat</dt>\r\n                <dd className=\"ency__definition\">{ bird.habitat ?? '/' }</dd>\r\n                <dt className=\"ency__therm\">Comportement</dt>\r\n                <dd className=\"ency__definition\">{ bird.behaviour ?? '/' }</dd>\r\n                <dt className=\"ency__therm\">Chant</dt>\r\n                    <dd className=\"ency__definition\">{bird.chipping ? <Audio audio={bird.chipping} /> : '/'}</dd>\r\n                <dt className=\"ency__therm\">Distribution</dt>\r\n                    {/* <dd className=\"ency__definition\"><GMap initialPos={position} positions={[position]} /></dd> */}\r\n                    <dd className=\"ency__definition\">{bird.distribution ? <GMap initialPos={position} positions={bird.distribution} zoom={8} getCoordinates={getCoordinates} /> : '/'}</dd>\r\n                </dl>\r\n                : \"Loading\"\r\n                    }\r\n        </Fragment>\r\n    )\r\n}\r\n","E:\\Projekte\\2020\\birdy\\src\\components\\Image.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\components\\Audio.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\components\\GMap.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\pages\\NewCapture.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\utils\\LatinNameList.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\pages\\SetPlace.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\utils\\City-list.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\pages\\NewCatchingPlace.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\pages\\Capture.jsx",["119"],"import React, { useState, useRef, useContext, useEffect } from 'react'\r\nimport latinNames from '../utils/LatinNameList'\r\nimport { AuthContext } from '../contexts/Auth'\r\nimport firebase from '../utils/firebase-config'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport default function Capture(props) {\r\n    const [complete, setComplete] = useState(false)\r\n    const textInput = useRef()\r\n    const [capture, setCapture] = useState()\r\n    const [docId, setDocId] = useState()\r\n    const [success, setSuccess] = useState(false)\r\n    const [redirect, setRedirect] = useState(false)\r\n\r\n    /**\r\n     * Get data from firestore\r\n     * @return capture\r\n     * @return docId\r\n     */\r\n    useEffect(() => {\r\n        firebase.firestore().collection('captures').where('ring', '==', props.match.params.capture).get()\r\n            .then(querySnapshot => {\r\n                const data = querySnapshot.docs.map(doc => doc.data());\r\n                const id = querySnapshot.docs.map(doc => doc.id);\r\n                setCapture(data[0]);\r\n                setDocId(id[0]);\r\n            }).catch(error => console.error(error));\r\n    }, []);\r\n\r\n    /**\r\n     * Check if input value is in latinName array\r\n     * @param {event} e \r\n     * @return Complete\r\n     */\r\n    const checkIfInArray = (e) => {\r\n        if (e.target.value !== \"\") {\r\n            setComplete(latinNames.filter(name => name.includes(e.target.value)))\r\n        } else {\r\n            setComplete(false)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On click change value of auto-complete input\r\n     * @param {event} e \r\n     */\r\n    const changeInputValue = (e) => {\r\n        textInput.current.value = e.target.textContent;\r\n        setComplete(false)\r\n    }\r\n\r\n    /**\r\n     * Delete from firestore\r\n     * @param {event} e \r\n     */\r\n    const deleteCapture = (e) => {\r\n        e.preventDefault();\r\n        firebase.firestore().collection('captures').doc(docId).delete().then(\r\n            setRedirect(true)\r\n        ).catch(\r\n            console.log('an error occured')\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get curred logged user\r\n     */\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    /**\r\n     * Update bird on form submit\r\n     * @param {event} e \r\n     */\r\n    const submitForm = async (e) => {\r\n        e.preventDefault();\r\n        console.log(docId)\r\n        firebase.firestore().collection('captures').doc(docId).update({\r\n            weight: e.target.weight.value,\r\n            latin: e.target.latin.value,\r\n            envergure: e.target.envergure.value,\r\n            adiposity: e.target.adiposity.value,\r\n            sexe: e.target.sexe.value,\r\n            age: e.target.age.value,\r\n            captype: e.target.captype.value,\r\n            user: currentUser.email,\r\n            updatedAt: new Date()\r\n        }).then(\r\n            setSuccess(true)\r\n        );\r\n\r\n    }\r\n\r\n    if (capture && currentUser.email !== capture.user) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n    \r\n    if (redirect) {\r\n        return <Redirect to={'/captures'} />\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"capture__wrapper\">\r\n                <button className=\"back\" onClick={props.history.goBack}>Retour</button>\r\n                <button className=\"btn btn--delete\" onClick={e=>deleteCapture(e)}>Supprimer</button>\r\n            </div>\r\n            <h2 className=\"capture__heading\">{props.match.params.capture}</h2>\r\n            {success ? <p className=\"success\">La capture a bien été mis à jour.</p>:''}\r\n            {capture ?\r\n        <form action=\"/\" method=\"get\" className=\"form\" onSubmit={e=> submitForm(e)}>\r\n            <label htmlFor=\"\">Nom latin</label>\r\n            <div className=\"autocomplete\">\r\n                        <input type=\"text\" onChange={(e) => checkIfInArray(e)} ref={textInput} placeholder=\"Gavia stellata\" name=\"latin\" defaultValue={capture.latin ?? ''}/>\r\n                {complete ?\r\n                    <ul>\r\n                        {\r\n                            complete.map((item, id) => <li key={id} onClick={e => changeInputValue(e)}>{item}</li>)\r\n                        }\r\n                    </ul> : ''\r\n                }\r\n            </div>\r\n            <label htmlFor=\"envergure\" className=\"label\">Envergure (cm)</label>\r\n                <input type=\"number\" className=\"input\" id=\"envergure\" name=\"envergure\" min=\"0\" defaultValue={capture.envergure ?? 0}/>\r\n            <label htmlFor=\"weight\" className=\"label\">Poids (g)</label>\r\n            <input type=\"number\" className=\"input\" id=\"weight\" name=\"weight\" min=\"0\" defaultValue={capture.weight ?? 0} />\r\n            <label htmlFor=\"adiposity\" className=\"label\">Adiposité (%)</label>\r\n            <input type=\"number\" className=\"input\" id=\"adiposity\" name=\"adiposity\" min=\"0\" defaultValue={capture.adiposity ?? 0} />\r\n            <label htmlFor=\"sexe\" className=\"label\">Sexe</label>\r\n            <select className=\"input\" id=\"sexe\" name=\"sexe\" defaultValue={capture.sexe ?? 'DEFAULT'}>\r\n                <option className=\"option\" disabled value='DEFAULT'>Choisir un sexe</option>\r\n                <option className=\"option\">Mâle</option>\r\n                <option className=\"option\">Femelle</option>\r\n            </select>\r\n            <label htmlFor=\"age\" className=\"label\">Âge</label>\r\n            <select className=\"input\" id=\"age\" name=\"age\" defaultValue={capture.age ?? 'DEFAULT'}>\r\n                <option className=\"option\" value=\"DEFAULT\" disabled>Choisir une tranche d’âge</option>\r\n                <option className=\"option\">Enfant</option>\r\n                <option className=\"option\">Adulte</option>\r\n            </select>\r\n            <label htmlFor=\"captype\" className=\"label\">Type de capture</label>\r\n            <select className=\"input\" id=\"captype\" name=\"captype\" defaultValue={capture.captype ?? 'DEFAULT'}>\r\n                <option className=\"option\" value=\"DEFAULT\" disabled>Choisir une méthode de capture</option>\r\n                <option className=\"option\">Nid</option>\r\n                <option className=\"option\">Filet</option>\r\n            </select>\r\n            <button type=\"submit\" className=\"btn btn--submit\">Mettre à jour</button>\r\n                </form> : 'Chargement...'\r\n        }\r\n        </section>\r\n    )\r\n}\r\n","E:\\Projekte\\2020\\birdy\\src\\pages\\NewReprise.jsx",["120"],"import React, { useState, useRef, useContext, useEffect } from 'react'\r\nimport latinNames from '../utils/LatinNameList'\r\nimport citys from '../utils/City-list'\r\nimport { AuthContext } from '../contexts/Auth'\r\nimport firebase from '../utils/firebase-config'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport default function NewReprise(props) {\r\n    const [complete, setComplete] = useState(false)\r\n    const [completeTwo, setCompleteTwo] = useState(false)\r\n    const textInput = useRef()\r\n    const textInputTwo = useRef()\r\n    const [capture, setCapture] = useState()\r\n    const [success, setSuccess] = useState(false)\r\n    const [redirect, setRedirect] = useState(false)\r\n\r\n    /**\r\n     * Get data from firestore\r\n     * @return capture\r\n     * @return docId\r\n     */\r\n    useEffect(() => {\r\n        firebase.firestore().collection('captures').doc(props.match.params.doc).get()\r\n            .then(querySnapshot => {\r\n                const data = querySnapshot.data();\r\n                setCapture(data);\r\n            }).catch(error => console.error(error));\r\n    }, []);\r\n\r\n    /**\r\n     * Check if input value is in latinName array\r\n     * @param {event} e \r\n     * @return Complete\r\n     */\r\n    const checkIfInArray = (e) => {\r\n        if (e.target.value !== \"\") {\r\n            setComplete(latinNames.filter(name => name.includes(e.target.value)))\r\n        } else {\r\n            setComplete(false)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if input value is in citys array\r\n     * @param {event} e \r\n     * @return Complete\r\n     */\r\n    const checkIfInArrayTwo = (e) => {\r\n        if (e.target.value !== \"\") {\r\n            setCompleteTwo(citys.filter(name => name.includes(e.target.value)))\r\n        } else {\r\n            setCompleteTwo(false)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On click change value of auto-complete input\r\n     * @param {event} e \r\n     */\r\n    const changeInputValue = (e) => {\r\n        textInput.current.value = e.target.textContent;\r\n        setComplete(false)\r\n    }\r\n\r\n    /**\r\n     * On click change value of auto-complete input\r\n     * @param {event} e \r\n     */\r\n    const changeInputValueTwo = (e) => {\r\n        textInputTwo.current.value = e.target.textContent;\r\n        setCompleteTwo(false)\r\n    }\r\n\r\n    /**\r\n     * Get curred logged user\r\n     */\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    /**\r\n     * Update bird on form submit\r\n     * @param {event} e \r\n     */\r\n    const submitForm = async (e) => {\r\n        e.preventDefault();\r\n        firebase.firestore().collection('reprises').doc().set({\r\n            weight: e.target.weight.value,\r\n            latin: e.target.latin.value,\r\n            envergure: e.target.envergure.value,\r\n            adiposity: e.target.adiposity.value,\r\n            sexe: e.target.sexe.value,\r\n            age: e.target.age.value,\r\n            captype: e.target.captype.value,\r\n            user: currentUser.email,\r\n            createdAt: new Date(),\r\n            id: Math.random().toString(36).substr(2, 9) + '_' + Math.random().toString(36).substr(2, 9),\r\n            ring: e.target.ring.value,\r\n            place: e.target.place.value,\r\n        }).then(\r\n            setSuccess(true)\r\n        );\r\n        \r\n        setRedirect(true)\r\n\r\n    }\r\n\r\n    \r\n    if (redirect) {\r\n        return <Redirect to={'/reprises'} />\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"capture__wrapper\">\r\n                <button className=\"back\" onClick={props.history.goBack}>Retour</button>\r\n            </div>\r\n            <h2 className=\"capture__heading\">{capture ? capture.ring : '/'}</h2>\r\n            {success ? <p className=\"success\">La capture a bien été mis à jour.</p>:''}\r\n            {capture ?\r\n        <form action=\"/\" method=\"get\" className=\"form\" onSubmit={e=> submitForm(e)}>\r\n            <label htmlFor=\"\">Nom latin</label>\r\n            <div className=\"autocomplete\">\r\n                        <input type=\"text\" onChange={(e) => checkIfInArray(e)} ref={textInput} placeholder=\"Gavia stellata\" name=\"latin\" defaultValue={capture.latin ?? ''}/>\r\n                {complete ?\r\n                    <ul>\r\n                        {\r\n                            complete.map((item, id) => <li key={id} onClick={e => changeInputValue(e)}>{item}</li>)\r\n                        }\r\n                    </ul> : ''\r\n                }\r\n            </div>\r\n            <div className=\"autocomplete\">\r\n                        <input type=\"text\" onChange={(e) => checkIfInArrayTwo(e)} ref={textInputTwo} placeholder=\"Gavia stellata\" name=\"place\" defaultValue={capture.place ?? ''}/>\r\n                {completeTwo ?\r\n                    <ul>\r\n                        {\r\n                            completeTwo.map((item, id) => <li key={id} onClick={e => changeInputValueTwo(e)}>{item}</li>)\r\n                        }\r\n                    </ul> : ''\r\n                }\r\n            </div>\r\n            <label htmlFor=\"envergure\" className=\"label\">Envergure (cm)</label>\r\n                <input type=\"number\" className=\"input\" id=\"envergure\" name=\"envergure\" min=\"0\" defaultValue={capture.envergure ?? 0}/>\r\n            <label htmlFor=\"weight\" className=\"label\">Poids (g)</label>\r\n            <input type=\"number\" className=\"input\" id=\"weight\" name=\"weight\" min=\"0\" defaultValue={capture.weight ?? 0} />\r\n            <label htmlFor=\"adiposity\" className=\"label\">Adiposité (%)</label>\r\n            <input type=\"number\" className=\"input\" id=\"adiposity\" name=\"adiposity\" min=\"0\" defaultValue={capture.adiposity ?? 0} />\r\n            <label htmlFor=\"sexe\" className=\"label\">Sexe</label>\r\n            <select className=\"input\" id=\"sexe\" name=\"sexe\" defaultValue={capture.sexe ?? 'DEFAULT'}>\r\n                <option className=\"option\" disabled value='DEFAULT'>Choisir un sexe</option>\r\n                <option className=\"option\">Mâle</option>\r\n                <option className=\"option\">Femelle</option>\r\n            </select>\r\n            <label htmlFor=\"age\" className=\"label\">Âge</label>\r\n            <select className=\"input\" id=\"age\" name=\"age\" defaultValue={capture.age ?? 'DEFAULT'}>\r\n                <option className=\"option\" value=\"DEFAULT\" disabled>Choisir une tranche d’âge</option>\r\n                <option className=\"option\">Enfant</option>\r\n                <option className=\"option\">Adulte</option>\r\n            </select>\r\n            <label htmlFor=\"captype\" className=\"label\">Type de capture</label>\r\n            <select className=\"input\" id=\"captype\" name=\"captype\" defaultValue={capture.captype ?? 'DEFAULT'}>\r\n                <option className=\"option\" value=\"DEFAULT\" disabled>Choisir une méthode de capture</option>\r\n                <option className=\"option\">Nid</option>\r\n                <option className=\"option\">Filet</option>\r\n            </select>\r\n            <input type=\"hidden\" value={capture.ring ?? '/'} name=\"ring\" />        \r\n            <button type=\"submit\" className=\"btn btn--submit\">Mettre à jour</button>\r\n                </form> : 'Chargement...'\r\n        }\r\n        </section>\r\n    )\r\n}\r\n","E:\\Projekte\\2020\\birdy\\src\\pages\\Reprise.jsx",["121"],"import React, { useState, useRef, useContext, useEffect } from 'react'\r\nimport latinNames from '../utils/LatinNameList'\r\nimport citys from '../utils/City-list'\r\nimport { AuthContext } from '../contexts/Auth'\r\nimport firebase from '../utils/firebase-config'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport default function Reprise(props) {\r\n    const [complete, setComplete] = useState(false)\r\n    const [completeTwo, setCompleteTwo] = useState(false)\r\n    const textInput = useRef()\r\n    const textInputTwo = useRef()\r\n    const [capture, setCapture] = useState()\r\n    const [success, setSuccess] = useState(false)\r\n    const [redirect, setRedirect] = useState(false)\r\n    const [id, setId] = useState()\r\n\r\n    /**\r\n     * Get data from firestore\r\n     * @return capture\r\n     * @return docId\r\n     */\r\n    useEffect(() => {\r\n        firebase.firestore().collection(\"reprises\").where('id', \"==\", props.match.params.reprise)\r\n            .get()\r\n            .then(querySnapshot => {\r\n                const data = querySnapshot.docs.map(doc => doc.data());\r\n                const id = querySnapshot.docs.map(doc => doc.id);\r\n                setId(id[0]);\r\n                setCapture(data[0]);\r\n            });\r\n    }, []);\r\n\r\n    /**\r\n     * Check if input value is in latinName array\r\n     * @param {event} e \r\n     * @return Complete\r\n     */\r\n    const checkIfInArray = (e) => {\r\n        if (e.target.value !== \"\") {\r\n            setComplete(latinNames.filter(name => name.includes(e.target.value)))\r\n        } else {\r\n            setComplete(false)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if input value is in citys array\r\n     * @param {event} e \r\n     * @return Complete\r\n     */\r\n    const checkIfInArrayTwo = (e) => {\r\n        if (e.target.value !== \"\") {\r\n            setCompleteTwo(citys.filter(name => name.includes(e.target.value)))\r\n        } else {\r\n            setCompleteTwo(false)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On click change value of auto-complete input\r\n     * @param {event} e \r\n     */\r\n    const changeInputValue = (e) => {\r\n        textInput.current.value = e.target.textContent;\r\n        setComplete(false)\r\n    }\r\n\r\n    /**\r\n     * On click change value of auto-complete input\r\n     * @param {event} e \r\n     */\r\n    const changeInputValueTwo = (e) => {\r\n        textInputTwo.current.value = e.target.textContent;\r\n        setCompleteTwo(false)\r\n    }\r\n\r\n    /**\r\n     * Get curred logged user\r\n     */\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    /**\r\n     * Update bird on form submit\r\n     * @param {event} e \r\n     */\r\n    const submitForm = async (e) => {\r\n        e.preventDefault();\r\n        console.log(id)\r\n        firebase.firestore().collection('reprises').doc(id).update({\r\n            weight: e.target.weight.value,\r\n            latin: e.target.latin.value,\r\n            envergure: e.target.envergure.value,\r\n            adiposity: e.target.adiposity.value,\r\n            sexe: e.target.sexe.value,\r\n            age: e.target.age.value,\r\n            captype: e.target.captype.value,\r\n            user: currentUser.email,\r\n            updatedAt: new Date(),\r\n            ring: e.target.ring.value,\r\n            place: e.target.place.value,\r\n        }).then(\r\n            setSuccess(true)\r\n        );\r\n        \r\n        setRedirect(true)\r\n\r\n    }\r\n\r\n    \r\n    if (redirect) {\r\n        return <Redirect to={'/reprises'} />\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"capture__wrapper\">\r\n                <button className=\"back\" onClick={props.history.goBack}>Retour</button>\r\n            </div>\r\n            <h2 className=\"capture__heading\">{capture ? capture.ring : '/'}</h2>\r\n            {success ? <p className=\"success\">La capture a bien été mis à jour.</p>:''}\r\n            {capture ?\r\n        <form action=\"/\" method=\"get\" className=\"form\" onSubmit={e=> submitForm(e)}>\r\n            <label htmlFor=\"\">Nom latin</label>\r\n            <div className=\"autocomplete\">\r\n                        <input type=\"text\" onChange={(e) => checkIfInArray(e)} ref={textInput} placeholder=\"Gavia stellata\" name=\"latin\" defaultValue={capture.latin ?? ''}/>\r\n                {complete ?\r\n                    <ul>\r\n                        {\r\n                            complete.map((item, id) => <li key={id} onClick={e => changeInputValue(e)}>{item}</li>)\r\n                        }\r\n                    </ul> : ''\r\n                }\r\n            </div>\r\n            <div className=\"autocomplete\">\r\n                        <input type=\"text\" onChange={(e) => checkIfInArrayTwo(e)} ref={textInputTwo} placeholder=\"Gavia stellata\" name=\"place\" defaultValue={capture.place ?? ''}/>\r\n                {completeTwo ?\r\n                    <ul>\r\n                        {\r\n                            completeTwo.map((item, id) => <li key={id} onClick={e => changeInputValueTwo(e)}>{item}</li>)\r\n                        }\r\n                    </ul> : ''\r\n                }\r\n            </div>\r\n            <label htmlFor=\"envergure\" className=\"label\">Envergure (cm)</label>\r\n                <input type=\"number\" className=\"input\" id=\"envergure\" name=\"envergure\" min=\"0\" defaultValue={capture.envergure ?? 0}/>\r\n            <label htmlFor=\"weight\" className=\"label\">Poids (g)</label>\r\n            <input type=\"number\" className=\"input\" id=\"weight\" name=\"weight\" min=\"0\" defaultValue={capture.weight ?? 0} />\r\n            <label htmlFor=\"adiposity\" className=\"label\">Adiposité (%)</label>\r\n            <input type=\"number\" className=\"input\" id=\"adiposity\" name=\"adiposity\" min=\"0\" defaultValue={capture.adiposity ?? 0} />\r\n            <label htmlFor=\"sexe\" className=\"label\">Sexe</label>\r\n            <select className=\"input\" id=\"sexe\" name=\"sexe\" defaultValue={capture.sexe ?? 'DEFAULT'}>\r\n                <option className=\"option\" disabled value='DEFAULT'>Choisir un sexe</option>\r\n                <option className=\"option\">Mâle</option>\r\n                <option className=\"option\">Femelle</option>\r\n            </select>\r\n            <label htmlFor=\"age\" className=\"label\">Âge</label>\r\n            <select className=\"input\" id=\"age\" name=\"age\" defaultValue={capture.age ?? 'DEFAULT'}>\r\n                <option className=\"option\" value=\"DEFAULT\" disabled>Choisir une tranche d’âge</option>\r\n                <option className=\"option\">Enfant</option>\r\n                <option className=\"option\">Adulte</option>\r\n            </select>\r\n            <label htmlFor=\"captype\" className=\"label\">Type de capture</label>\r\n            <select className=\"input\" id=\"captype\" name=\"captype\" defaultValue={capture.captype ?? 'DEFAULT'}>\r\n                <option className=\"option\" value=\"DEFAULT\" disabled>Choisir une méthode de capture</option>\r\n                <option className=\"option\">Nid</option>\r\n                <option className=\"option\">Filet</option>\r\n            </select>\r\n            <button type=\"submit\" className=\"btn btn--submit\">Mettre à jour</button>\r\n                </form> : 'Chargement...'\r\n        }\r\n        </section>\r\n    )\r\n}\r\n\r\n","E:\\Projekte\\2020\\birdy\\src\\pages\\Places.jsx",[],"E:\\Projekte\\2020\\birdy\\src\\pages\\User.jsx",["122","123"],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport firebase from '../utils/firebase-config'\r\n\r\nexport default function User(props) {\r\n    const [user, setUser] = useState();\r\n    const [captures, setCaptures] = useState(0);\r\n    const [sites, setSites] = useState([]);\r\n\r\n        useEffect(() => {\r\n            firebase.firestore().collection(\"users\").where('email', '==', props.match.params.user)\r\n                .get()\r\n                .then(querySnapshot => {\r\n                    const data = querySnapshot.docs.map(doc => doc.data());\r\n                    console.log(data)\r\n                    setUser(data[0]);\r\n                })\r\n            firebase.firestore().collection(\"captures\").where('user', '==', props.match.params.user)\r\n                .get()\r\n                .then(querySnapshot => {\r\n                    const data = querySnapshot.docs.map(doc => doc.data());\r\n                    console.log(data)\r\n                    setCaptures(data);\r\n                })\r\n            let places = [];\r\n\r\n\r\n\r\n            if (captures) {\r\n                captures.forEach(site => {\r\n                        places.push(site.place);\r\n                })\r\n\r\n            places = [...new Set(places)]\r\n            } \r\n            setSites(places.sort())\r\n        }, [])\r\n    \r\n    console.log(sites)\r\n    \r\n    return (\r\n        <section>\r\n            <div className=\"capture__wrapper\">\r\n                <button className=\"back\" onClick={props.history.goBack}>Retour</button>\r\n            </div>\r\n            {\r\n                user ?\r\n                    <Fragment>\r\n                        <h2>{user.name ?? '/'}</h2>\r\n                        <p>{user.id ?? '/'}</p>\r\n                        <a href={\"mailto:\" + user.email}>{user.email ?? \"/\"}</a>\r\n                        {captures ? \r\n                            <Fragment>\r\n                                <p>Cet utilisateur à {captures.length} captures</p>\r\n                                <ul>\r\n                                    {sites ? sites.map((place, id)=>\r\n                                        <li key={id}>{place}</li>\r\n\r\n                                    ):''\r\n                                    }\r\n                                </ul>\r\n                            </Fragment>\r\n                        : 'Pas encore de captures'}\r\n                    </Fragment> : 'Cet utilisateur n’existe pas.'\r\n            }\r\n            \r\n        </section>\r\n    )\r\n}\r\n",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":26,"column":8,"nodeType":"130","endLine":26,"endColumn":10,"suggestions":"131"},{"ruleId":"128","severity":1,"message":"129","line":26,"column":8,"nodeType":"130","endLine":26,"endColumn":10,"suggestions":"132"},{"ruleId":"128","severity":1,"message":"133","line":21,"column":8,"nodeType":"130","endLine":21,"endColumn":10,"suggestions":"134"},{"ruleId":"128","severity":1,"message":"135","line":28,"column":8,"nodeType":"130","endLine":28,"endColumn":10,"suggestions":"136"},{"ruleId":"128","severity":1,"message":"137","line":28,"column":8,"nodeType":"130","endLine":28,"endColumn":10,"suggestions":"138"},{"ruleId":"128","severity":1,"message":"139","line":32,"column":8,"nodeType":"130","endLine":32,"endColumn":10,"suggestions":"140"},{"ruleId":"141","severity":1,"message":"142","line":2,"column":10,"nodeType":"143","messageId":"144","endLine":2,"endColumn":14},{"ruleId":"128","severity":1,"message":"145","line":37,"column":12,"nodeType":"130","endLine":37,"endColumn":14,"suggestions":"146"},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentUser.email'. Either include it or remove the dependency array.","ArrayExpression",["149"],["150"],"React Hook useEffect has a missing dependency: 'props.match.params.bird'. Either include it or remove the dependency array.",["151"],"React Hook useEffect has a missing dependency: 'props.match.params.capture'. Either include it or remove the dependency array.",["152"],"React Hook useEffect has a missing dependency: 'props.match.params.doc'. Either include it or remove the dependency array.",["153"],"React Hook useEffect has a missing dependency: 'props.match.params.reprise'. Either include it or remove the dependency array.",["154"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'captures' and 'props.match.params.user'. Either include them or remove the dependency array.",["155"],"no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"156","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},"Update the dependencies array to be: [currentUser.email]",{"range":"169","text":"170"},{"range":"171","text":"170"},"Update the dependencies array to be: [props.match.params.bird]",{"range":"172","text":"173"},"Update the dependencies array to be: [props.match.params.capture]",{"range":"174","text":"175"},"Update the dependencies array to be: [props.match.params.doc]",{"range":"176","text":"177"},"Update the dependencies array to be: [props.match.params.reprise]",{"range":"178","text":"179"},"Update the dependencies array to be: [captures, props.match.params.user]",{"range":"180","text":"181"},[1050,1052],"[currentUser.email]",[1046,1048],[716,718],"[props.match.params.bird]",[1123,1125],"[props.match.params.capture]",[1073,1075],"[props.match.params.doc]",[1223,1225],"[props.match.params.reprise]",[1332,1334],"[captures, props.match.params.user]"]